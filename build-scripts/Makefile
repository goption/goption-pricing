# Makefile:
# Copyright (C) 2018 Brian Hazeltine <onwsk8r@gmail.com> https://wasthat.me

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

DIR ?= $(PWD)# Path to this Makefile
GO ?= go# Replace with the path to the binary if go is not on your $PATH
GOGET ?=$(GO) get -u# A command that accepts a list of packages to get
CURL ?= curl -sfL# A command that accepts a URL as a parameter, such as wget
COVERAGE ?= coverage# Name of the coverage file to generate
OS ?= $(shell uname -s)# A command that identifies the OS
LINTER ?= glcilint# Name of the linter to use
TESTER ?= ginkgo# Name of the command to run tests
PM ?= gomod# Name of the package manager (eg govendor, dep). Also see modtype.
export SHELL = /usr/bin/env bash

include $(DIR)/makefiles/$(LINTER).mk
include $(DIR)/makefiles/$(TESTER).mk
include $(DIR)/makefiles/$(PM).mk

# The dependent jobs listed here should be defined once in one of the included Makefiles.
# The jobs on the left side of the ":" define the interface that users should use
# to perform the tasks. The jobs on the right side of the ":" define an interface
# that the Makefiles imported above should fulfill.

# Lint defines an interface for linting
lint: | _pre_lint _lint ## Run the configured linter
lint_changed: | _pre_lint _lint_changed ## Lint packages of staged files
.PHONY: lint lint_changed

# Test and $(COVERAGE) define jobs to run tests
test: | _pre_test _test ## Run the configured test framework
test_changed: | _pre_test _test_changed ## Run tests on packages with staged changes
$(COVERAGE): | _pre_coverage _coverage ## Generate an lcov coverage file named $COVERAGE
print_coverage: $(COVERAGE) ## Print out a short coverage report
	go tool cover -func $(COVERAGE)
.PHONY: test test_changed print_coverage

# Check is a convenience job to run testing and linting simultaneously
check_changed: test_changed lint_changed ## Test and lint changed packages
check: test lint ## Test and lint the project
.PHONY: check_changed check

# Manage dependencies using either modules or vendoring (implementation dependent)
depend: | _pre_depend _depend ## Install dependencies. See $PM

# Clean cleans up after the linter and harness
clean: _clean_lint _clean_test _clean_coverage ## Remove any files generated by linting or testing
	go clean
clean_all: clean _clean_$(MODTYPE) ## Same as clean, and removes project dependencies
reset: ## **Warning** delete all files that are not committed to git
	@echo "**WARNING: Deleting all untracked files!"
	@read -p "Are you sure (y deletes)? " -n 1 -r
	@if [[ $$REPLY =~ [Yy] ]]; then
		git clean -fxd :/
	@else
		@echo "Aborting dangerous operation.
	@fi
.PHONY: clean clean_all reset

local: .git/hooks/pre-commit _install_lint _install_test _install_depend ## Set up a local development environment
.PHONY: local

.git/hooks/pre-commit:
	echo "Installing pre-commit hook"
	echo "make check_changed" > .git/hooks/pre-commit
	chmod +x .git/hooks/pre-commit

# Original idea came from https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html
# but this was born from a conversation I had... https://stackoverflow.com/questions/52565012/how-to-parse-grep-output-into-an-array-and-iterate-over-it
help: ## Display this help message and exit
	 @awk -f $(DIR)/mkfile_help.awk $(MAKEFILE_LIST)
.PHONY: help
.DEFAULT_GOAL := help
